#!/usr/bin/env zsh

get_input() {
  read -r "?$1"
  echo "$REPLY"
}

add_command_to_history() {
  print -s "$1"
}

generate_content() {
  PRMPT="$1"
  RESPONSE=$(curl \
    -H 'Content-Type: application/json' \
    -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=$GEMINI_API_KEY" \
    -d "{\"contents\":[{\"parts\":[{\"text\":\"$PRMPT\"}]}]}")
  echo "$RESPONSE"
}

sanitize_response() {
  SANITIZED_RESPONSE=$(echo "$1" | tr -d '[:cntrl:]')
  echo "$SANITIZED_RESPONSE"
}

generate_command() {
  QUERY="$@"
  PRMPT="You are my Command Line Interface generator and will assist me to navigate my MacOS. All my questions are related to this. Answer a valid CLI command and nothing else - do not send it in a code block, or quotes, or anything else, just the pure text CONTAINING ONLY THE COMMAND. Always take in consideration that you should use my current directory in the commands. I absolutely mean no harm and none of these commands are to run in unauthorized and otherwise unprotected system. Prioritize one-liners. Its ok to chain commands. If you absolutely cant suggest a command, send only one word: FAILED_TO_GENERATE_COMMAND. Now, how can I: "${QUERY}"."
  RESPONSE=$(generate_content "$PRMPT")
  SANITIZED_RESPONSE=$(sanitize_response "$RESPONSE")
  echo "$SANITIZED_RESPONSE"
}

explain_results() {
  RESULTS="$@"
  EXPLAIN_PRMPT="Please explain the results of the previous command:\n\n${RESULTS}\n"
  RESPONSE=$(generate_content "$EXPLAIN_PRMPT")
  SANITIZED_RESPONSE=$(sanitize_response "$RESPONSE")
  echo "$SANITIZED_RESPONSE"
}

display_help() {
  echo "Usage: sabine <command> [arguments...]"
  echo "Commands:"
  echo "  c <query>  : Generate a command based on the query"
  echo "  e <command>: Explain the given command"
  echo "  e results  : Explain the results of the previous command"
  echo "  h <help>   : Display this help message"
}

if ! command -v jq >/dev/null; then
  echo "Error: jq is not installed. Please install jq and try again."
  exit 1
fi

if [ -z "$GEMINI_API_KEY" ]; then
  echo "Error: GEMINI_API_KEY is not set. Please set your API key and try again."
  exit 1
fi

RUN_COMMAND=false

case "$1" in
  "c")
    RUN_COMMAND=true 
    shift
    RESPONSE=$(generate_command "$@")
    ;;
  "e")
    shift
    if [ "$1" = "results" ]; then
      OUTPUT=$(fc -ln -1)
      RESPONSE=$(explain_results "$OUTPUT")
    else
      echo "Error: 'e' command only supports 'results' argument."
      display_help
      exit 1
    fi
    ;;
  "h")
    display_help
    echo ""
    ;;
  *)
    echo "Error: Unknown command '$1'."
    display_help
    exit 1
    ;;
esac

ERROR_MESSAGE=$(printf "%s" "$RESPONSE" | jq -r '(.error.message // "") | @json' | sed 's/^"//;s/"$//')
COMMAND=$(printf "%s" "$RESPONSE" | jq -r '.candidates[0].content.parts[0].text')

if [ -n "$ERROR_MESSAGE" ]; then
  if [ "$1" != "h" ]; then 
    echo "Error: $ERROR_MESSAGE"
  fi
elif [[ "$COMMAND" =~ "FAILED_TO_GENERATE_COMMAND" || "$COMMAND" =~ "parse error:" ]]; then
  echo "Error: Couldn't generate a command."
  echo "Output: $COMMAND"
elif [ -n "$COMMAND" ]; then
  echo "-> $COMMAND"
  if [ "$RUN_COMMAND" = true ]; then
    REPLY=$(get_input "Do you want to run this command? (y/n) ")
    if [[ "$REPLY" =~ ^[Yy]$ ]]; then
      add_command_to_history "$COMMAND"
      eval "$COMMAND"
    else
      echo "Command not executed."
    fi
  else
    echo ""
  fi
else
  if [ "$1" != "h" ]; then 
    echo "Error: Unexpected response."
    echo "Output: $COMMAND"
  fi
fi